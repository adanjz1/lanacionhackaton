package com.clublanacion.service;import android.app.Activity;import android.app.ActivityManager;import android.app.ActivityManager.RunningServiceInfo;import android.app.Notification;import android.app.PendingIntent;import android.app.Service;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.os.IBinder;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import com.clublanacion.MainActivity;import com.clublanacion.R;import com.clublanacion.util.PreferencesHelper;import com.clublanacion.view.BlockTouchView;import com.clublanacion.view.lockheadview.LockHeadView;import java.util.Iterator;public class BlockTouchScreenService extends Service {    public static final String RECEIVER_LOCK = "lockReceiver";    public static final String RECEIVER_UNLOCK = "unlockReceiver";    public static final String RECEIVER_UNLOCK_FOR_CALL = "unlockReceiverForCall";    private static final Object sycnObj = new Object();    private static final Object sycnObjForChanges = new Object();    private static boolean BlockTouch = false;    private static boolean ReadyForChanges = true;    private InOutCallReceiver mIncomingReceiver;    private BlockTouchView mViewOnTop;    private LockHeadView mLockHeadView;    private final BroadcastReceiver lockReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (action == null)                return;            if (action.equals(RECEIVER_LOCK)) {                try {                    while (!BlockTouchScreenService.isReadyForChanges()) {                        Thread.sleep(8);                    }                    if (!BlockTouchScreenService.isBlockTouch()) {                        BlockTouchScreenService.setReadyForChanges(false);                        getHelper().updatePreferences();                        if (mViewOnTop == null)                            createViewAndShow();                        else                            mViewOnTop.show();                        mViewOnTop.addViewToWindowManager();                        mViewOnTop.setBlockTouch(true);                        setBlockTouch(true);                        if (mLockHeadView == null)                            createLockViewAndShow();                        else                            mLockHeadView.show();                        mLockHeadView.addViewToWindowManager();                        BlockTouchScreenService.setReadyForChanges(true);                    }                } catch (Exception e) {                    e.printStackTrace();                }            } else if (action.equals(RECEIVER_UNLOCK)) {                // Functions.enableKeyguard(context);                try {                    while (!BlockTouchScreenService.isReadyForChanges()) {                        Thread.sleep(6);                    }                    if (BlockTouchScreenService.isBlockTouch()) {                        BlockTouchScreenService.setReadyForChanges(false);                        mViewOnTop.setBlockTouch(false);                        BlockTouchScreenService.this.mLockHeadView.dismiss();                        BlockTouchScreenService.this.mViewOnTop.dismiss();                        setBlockTouch(false);                        BlockTouchScreenService.setReadyForChanges(true);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }    };    private BroadcastReceiver screenReceiver;    private PreferencesHelper helper;    public static boolean isBlockTouch() {        synchronized (sycnObj) {            return BlockTouch;        }    }    public static void setBlockTouch(boolean blockTouch) {        synchronized (sycnObj) {            BlockTouch = blockTouch;        }    }    public static boolean isReadyForChanges() {        synchronized (sycnObjForChanges) {            return ReadyForChanges;        }    }    public static void setReadyForChanges(boolean readyForChanges) {        synchronized (sycnObjForChanges) {            ReadyForChanges = readyForChanges;        }    }    public static boolean isServiceRunning(Context context) {        @SuppressWarnings("rawtypes")        Iterator var1 = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE))                .getRunningServices(Integer.MAX_VALUE).iterator();        if (var1 != null) {            while (var1.hasNext()) {                RunningServiceInfo serviceInfo = (RunningServiceInfo) var1                        .next();                if (BlockTouchScreenService.class.getName().equals(                        serviceInfo.service.getClassName())) {                    return true;                }            }        }        return false;    }    public static void startService(Context context) {        context.startService(new Intent(context, BlockTouchScreenService.class));    }    public static void stopService(Activity context) {        context.stopService(new Intent(context, BlockTouchScreenService.class));    }    public View getmLockHeadView() {        return (View) mLockHeadView;    }    private void createViewAndShow() {        // removeTopView();        BlockTouchScreenService.this.mViewOnTop = new BlockTouchView(                BlockTouchScreenService.this);        BlockTouchScreenService.this.mViewOnTop.show();    }    private void removeTopView() {        if (BlockTouchScreenService.this.mViewOnTop != null) {            try {                BlockTouchScreenService.this.mViewOnTop.dismissAndDestroy();                BlockTouchScreenService.this.mViewOnTop                        .setOnClickListener((OnClickListener) null);                BlockTouchScreenService.this.mViewOnTop = null;            } catch (Exception ex) {                ex.printStackTrace();            }        }    }    private void createLockViewAndShow() {        BlockTouchScreenService.this.mLockHeadView = new LockHeadView(                BlockTouchScreenService.this);        BlockTouchScreenService.this.mLockHeadView.show();    }    private void removeLockView() {        if (BlockTouchScreenService.this.mLockHeadView != null) {            try {                BlockTouchScreenService.this.mLockHeadView.dismissAndDestroy();                BlockTouchScreenService.this.mLockHeadView = null;            } catch (Exception ex) {                ex.printStackTrace();            }        }    }    private void registerBroadcast() {        try {            IntentFilter filter = new IntentFilter(RECEIVER_LOCK);            filter.addAction(RECEIVER_UNLOCK);            registerReceiver(lockReceiver, filter);        } catch (Exception ex) {            ex.printStackTrace();        }        try {            mIncomingReceiver = new InOutCallReceiver();            IntentFilter intentFilter = new IntentFilter(                    "android.intent.action.PHONE_STATE");            intentFilter.addAction(Intent.ACTION_NEW_OUTGOING_CALL);            registerReceiver(mIncomingReceiver, intentFilter);        } catch (Exception ex) {            ex.printStackTrace();        }        try {            IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);            filter.addAction(Intent.ACTION_SCREEN_ON);            screenReceiver = new ScreenStateReceiver(this);            registerReceiver(screenReceiver, filter);        } catch (Exception ex) {            ex.printStackTrace();        }    }    private void unregisterBroadcast() {        try {            unregisterReceiver(mIncomingReceiver);        } catch (Exception ex) {            ex.printStackTrace();        }        try {            unregisterReceiver(lockReceiver);        } catch (Exception ex) {            ex.printStackTrace();        }        try {            unregisterReceiver(screenReceiver);        } catch (Exception ex) {            ex.printStackTrace();        }    }    public IBinder onBind(Intent intent) {        return null;    }    public void onCreate() {        super.onCreate();        getHelper().setCachedBanner(null);        registerBroadcast();        createViewAndShow();    }    public void onDestroy() {        removeTopView();        removeLockView();        unregisterBroadcast();        setBlockTouch(false);        Intent in = new Intent();        in.setAction("RecoverClublnService");        sendBroadcast(in);        super.onDestroy();    }    private Notification getServiceRegisteredUserNotification() {        // The PendingIntent to launch our activity if the user selects        // this notification        CharSequence title = "Club la nacion";        PendingIntent contentIntent = PendingIntent.getActivity(this, 0,                new Intent(this, MainActivity.class), 0);        return new Notification.Builder(this).setContentTitle(title)                .setContentText("Esta recibiendo los mejores beneficios")                .setSmallIcon(R.drawable.notification_registered)                .setContentIntent(contentIntent).getNotification();    }    private PreferencesHelper getHelper() {        if (helper == null)            helper = new PreferencesHelper(this);        return helper;    }    public int onStartCommand(Intent intent, int flags, int startId) {        Notification notification;            notification = getServiceRegisteredUserNotification();        startForeground(7331, notification);        return START_STICKY;    }    public void setScreenOn() {        if (isBlockTouch())            this.mLockHeadView.setScreenOn();    }}