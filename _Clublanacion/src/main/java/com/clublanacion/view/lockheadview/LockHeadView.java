package com.clublanacion.view.lockheadview;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import android.app.Notification;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.content.res.Configuration;import android.graphics.Bitmap;import android.graphics.PixelFormat;import android.graphics.Point;import android.graphics.Color;import android.text.Spanned;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.media.MediaPlayer;import android.media.MediaPlayer.OnPreparedListener;import android.net.Uri;import android.os.AsyncTask;import android.os.Handler;import android.os.Handler.Callback;import android.os.Message;import android.support.v4.view.GestureDetectorCompat;import android.text.Editable;import android.text.TextWatcher;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.GestureDetector.SimpleOnGestureListener;import android.view.Gravity;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup.MarginLayoutParams;import android.view.WindowManager;import android.view.WindowManager.LayoutParams;import android.widget.Button;import android.widget.DigitalClock;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.text.Html;import com.clublanacion.service.ScreenStateReceiver;import com.clublanacion.util.URLImageParser;import com.clublanacion.MainActivity;import com.clublanacion.R;import com.clublanacion.async.AsyncGetBanner;import com.clublanacion.async.AsyncGetBanner.ILoadBanner;import com.clublanacion.async.AsyncGetBanner.ILocationProvisioner;import com.clublanacion.entity.BannerEntity;import com.clublanacion.global.Constants;import com.clublanacion.global.Functions;import com.clublanacion.global.Singletons;import com.clublanacion.imagehelper.UrlImageViewCallback;import com.clublanacion.imagehelper.UrlImageViewHelper;import com.clublanacion.service.BlockTouchScreenService;import com.clublanacion.util.Chronometer;import com.clublanacion.util.PreferencesHelper;import com.clublanacion.view.AnimationView;//import com.clublanacion.view.RegistrationClick;import com.clublanacion.view.lockheadview.states.LockScreenState;import com.clublanacion.view.lockheadview.states.ResourceLoaded;import com.clublanacion.view.lockheadview.states.ScreenOnState;import com.clublanacion.view.lockheadview.states.UnlockedState;import java.util.Random;import java.util.Timer;import java.util.TimerTask;public class LockHeadView extends View implements ILoadBanner {    private static boolean isPrepared = false;    int width = 0;    int iCenterWidth = 0;    private GestureDetectorCompat mCenterImageDectector;    private GestureDetectorCompat mScrollDectector;    private RelativeLayout.LayoutParams iCenterParams;    private LayoutParams lockHeadParams;    private View lockHead;    private View darkHead;    private RelativeLayout rlSlider;    private FrameLayout rlBackgroundFrameLayout;    private ImageView imvRight, imvCenter, imvLeft, imvCenterBG;    private ImageView imvBackground;    private WindowManager mWindowManager;    private TextView tvLeftStatus, tvRightStatus,htmlTextView;    private static String linkNow;    private DigitalClock dclock;    private AnimationView animationView;    private boolean isTouchCenter = false;    private SimpleOnGestureListener mCenterImageListener = new SimpleOnGestureListener() {        public boolean onDown(MotionEvent event) {            Functions.vibrate(getContext());            Singletons.setOnScroll(true);            isTouchCenter = true;            imvCenterBG.setVisibility(View.INVISIBLE);            iCenterWidth = imvCenter.getWidth();            iCenterParams = new RelativeLayout.LayoutParams(iCenterWidth,                    iCenterWidth);            return super.onDown(event);        }    };    private SimpleOnGestureListener mScrollListener = new SimpleOnGestureListener() {        public boolean onScroll(MotionEvent event1, MotionEvent event2,                                float distanceX, float distanceY) {            if (isTouchCenter)                updateLayout(event2);            return true;        }    };    private Chronometer myChronometer;    private boolean isFirstBannerLoaded = false;    private PreferencesHelper helper;    private ILocationProvisioner locationProvisioner = new ProvisionSupplier(this.getContext());    private BannerEntity bannerToShow;    private AsyncGetBanner asyncGetBanner;    private AsyncGetBanner asyncGetNextBanner;    private MediaPlayer mediaPlayer = null;    private LockScreenState state = new UnlockedState();    public LockHeadView(Context context) {        super(context);        configureViews(context);        this.initView();    }    public static boolean isPrepared() {        return isPrepared;    }    public LockScreenState getState() {        return state;    }    private void configureViews(Context context) {        getScreenWidth();        LayoutInflater inflater = LayoutInflater.from(context);        lockHead = inflater.inflate(R.layout.lockscreen, null);        darkHead = inflater.inflate(R.layout.darkscreen, null);        setViews();        configureDigitalClock(context);    }    private void configureDigitalClock(Context context) {        Typeface font = Typeface.createFromAsset(this.getContext().getAssets(),                "HelveticaNeueLTPro-Lt.ttf");        dclock.setTypeface(font);        dclock.addTextChangedListener(new TextWatcher() {            @Override            public void onTextChanged(CharSequence s, int start, int before,                                      int count) {            }            @Override            public void beforeTextChanged(CharSequence s, int start, int count,                                          int after) {            }            @Override            public void afterTextChanged(Editable s) {                String[] split = s.toString().split(":");                if (split.length > 2) {                    s.clear();                    s.append(split[0]);                    s.append(":");                    s.append(split[1]);                }            }        });    }    private void setViews() {        animationView = (AnimationView) lockHead                .findViewById(R.id.lockscreen_imv_loading);        imvRight = (ImageView) lockHead.findViewById(R.id.lockscreen_imv_right);        imvCenter = (ImageView) lockHead                .findViewById(R.id.lockscreen_imv_center);        imvLeft = (ImageView) lockHead.findViewById(R.id.lockscreen_imv_left);        imvCenterBG = (ImageView) lockHead                .findViewById(R.id.lockscreen_imv_center_bg);        imvBackground = (ImageView) lockHead                .findViewById(R.id.lockscreen_imv_background);        htmlTextView = (TextView) lockHead.findViewById(R.id.html_text);        rlSlider = (RelativeLayout) lockHead                .findViewById(R.id.lockscreen_rl_slider);        rlBackgroundFrameLayout = (FrameLayout) lockHead                .findViewById(R.id.lockscreen_rl_slider_main_frame);        dclock = (DigitalClock) lockHead.findViewById(R.id.lockscreen_dcl);    }    private void getScreenWidth() {        this.mWindowManager = (WindowManager) getContext().getSystemService(                Context.WINDOW_SERVICE);        Point point = new Point();        this.mWindowManager.getDefaultDisplay().getSize(point);        width = point.x;    }    private void initView() {        getScreenWidth();            rlSlider.setVisibility(View.VISIBLE);                imvRight.setImageResource(R.drawable.ic_lockscreen_unlock);                imvLeft.setImageResource(R.drawable.linkcln);            ClublnOnTouchListener onTouchListener = new ClublnOnTouchListener();            this.imvBackground.setOnTouchListener(onTouchListener);            this.htmlTextView.setOnTouchListener(onTouchListener);            this.lockHead.setOnTouchListener(new OnTouchListener() {                public boolean onTouch(View var1, MotionEvent event) {                    if (event.getAction() == MotionEvent.ACTION_UP) {                        isTouchCenter = false;                        if (Singletons.isOnScroll()) {                            horizontalActionUP(event);                            Singletons.setOnScroll(false);                        }                    }                    return LockHeadView.this.mScrollDectector                            .onTouchEvent(event);                }            });            this.mCenterImageDectector = new GestureDetectorCompat(                    getContext(), this.mCenterImageListener);            this.mScrollDectector = new GestureDetectorCompat(getContext(),                    this.mScrollListener);    }    private void horizontalActionUP(MotionEvent event2) {        if (imvCenter == null)            imvCenter = (ImageView) lockHead                    .findViewById(R.id.lockscreen_imv_center);        if (imvCenterBG == null)            imvCenterBG = (ImageView) lockHead                    .findViewById(R.id.lockscreen_imv_center_bg);        getScreenWidth();        iCenterWidth = imvCenter.getWidth();        imvCenterBG.setVisibility(View.VISIBLE);        iCenterParams = new RelativeLayout.LayoutParams(iCenterWidth,                iCenterWidth);        if (event2.getX() >= (width * 3 / 4)) {            iCenterParams.setMargins(width - iCenterWidth, 0, 0, 0);            imvCenter.setLayoutParams(iCenterParams);                Functions.vibrate(getContext());                getContext().sendBroadcast(                        new Intent(BlockTouchScreenService.RECEIVER_UNLOCK));        } else if (event2.getX() <= (width / 4)) {            iCenterParams.setMargins(0, 0, 0, 0);            imvCenter.setLayoutParams(iCenterParams);                if (imvLeft.getVisibility() == View.VISIBLE) {                    Functions.vibrate(getContext());                    goToBannerLink();                    getContext()                            .sendBroadcast(                                    new Intent(                                            BlockTouchScreenService.RECEIVER_UNLOCK));                } else {                    iCenterParams.setMargins((width / 2) - (iCenterWidth / 2),                            0, 0, 0);                    imvCenter.setLayoutParams(iCenterParams);                }        } else {            Functions.logE("NADA");            iCenterParams.setMargins((width / 2) - (iCenterWidth / 2), 0, 0, 0);            imvCenter.setLayoutParams(iCenterParams);        }    }    private void goToBannerLink() {        String bannerUrl;        bannerUrl = LockHeadView.linkNow;        if (bannerUrl == null || bannerUrl.equals(""))            return;        final String finalUrl = bannerUrl;        Functions.gotoUrl(getContext(), finalUrl);    }    private void updateLayout(MotionEvent e2) {        if (imvCenter == null)            imvCenter = (ImageView) lockHead                    .findViewById(R.id.lockscreen_imv_center);        getScreenWidth();        iCenterWidth = imvCenter.getWidth();        iCenterParams = new RelativeLayout.LayoutParams(iCenterWidth,                iCenterWidth);        if ((e2.getX() + (iCenterWidth / 2)) > width) {            int toMargin = width - iCenterWidth;            iCenterParams.setMargins(toMargin, 0, 0, 0);        } else if ((e2.getX() - (iCenterWidth / 2)) < 0) {            iCenterParams.setMargins(0, 0, 0, 0);        } else {            int toMargin = (int) (e2.getX() - (iCenterWidth / 2));            iCenterParams.setMargins(toMargin, 0, 0, 0);        }        imvCenter.setLayoutParams(iCenterParams);        LockHeadView.this.mWindowManager.updateViewLayout(                LockHeadView.this.lockHead, lockHeadParams);    }    public void dismiss() {        if (this.lockHead != null)            ((WindowManager) this.getContext().getSystemService(                    Context.WINDOW_SERVICE)).removeViewImmediate(this.lockHead);        if (this.darkHead != null)            ((WindowManager) this.getContext().getSystemService(                    Context.WINDOW_SERVICE)).removeViewImmediate(this.darkHead);    }    public void dismissAndDestroy() {        if (this.lockHead != null)            ((WindowManager) this.getContext().getSystemService(                    Context.WINDOW_SERVICE)).removeViewImmediate(this.lockHead);        if (this.darkHead != null)            ((WindowManager) this.getContext().getSystemService(                    Context.WINDOW_SERVICE)).removeViewImmediate(this.darkHead);        this.lockHead = null;        this.darkHead = null;    }    public void updateUI() {        this.lockHead.invalidate();        this.darkHead.invalidate();        configureViews(lockHead.getContext());    }    public void show() {        // Force to reinflate view. Thats a temporary solution to refresh all        // controls from the XML initial positions        updateUI();        initView();        try {            lockHeadParams = new WindowManager.LayoutParams(                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT,                    WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE                            | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                            | WindowManager.LayoutParams.FLAG_FULLSCREEN, PixelFormat.RGB_565);            lockHeadParams.alpha = 1.0f;            lockHeadParams.gravity = Gravity.TOP | Gravity.LEFT;            lockHeadParams.x = 0;            lockHeadParams.y = 0;            lockHeadParams.screenOrientation = Configuration.ORIENTATION_PORTRAIT;            lockHead.setLayoutParams(lockHeadParams);        } catch (Exception e) {            e.printStackTrace();        }        getBannerData();    }    public void addViewToWindowManager() {        try {            ((WindowManager) this.getContext().getSystemService(                    Context.WINDOW_SERVICE)).addView(this.darkHead,                    lockHeadParams);            ((WindowManager) this.getContext().getSystemService(                    Context.WINDOW_SERVICE)).addView(this.lockHead,                    lockHeadParams);        } catch (Exception e) {            e.printStackTrace();        }    }    private PreferencesHelper getHelper() {        if (helper == null)            helper = new PreferencesHelper(getContext());        return helper;    }    private void getBannerData() {        imvBackground.setBackgroundColor(getResources().getColor(                R.color.Blur_Gray));        if (!Functions.checkNetwork(getContext())) {            getHelper().setCachedBanner(null);            //bannerToShow = null;            setOfflineBanner();            return;        }        animationView.setVisibility(View.VISIBLE);        // Si hay cache pido solo el siguiente banner y muestro la cache        if (!getHelper().getCachedBanner().get_banner().equals("")                && !getHelper().getCachedBanner().get_linkbtn().equals("")) {            bannerToShow = null; // Libero el banner entity viejo para GC            bannerToShow = getHelper().getCachedBanner();            downloadAndSetBanner(bannerToShow);            isFirstBannerLoaded = true;        } else { // No hay cache, solo pido. ----La primera vista de la app            if (asyncGetBanner != null                    && asyncGetBanner.getStatus() != AsyncTask.Status.FINISHED)                asyncGetBanner.cancel(true);            asyncGetBanner = new AsyncGetBanner(LockHeadView.this, locationProvisioner);            asyncGetBanner.execute(getHelper());        }        // Pido el siguiente banner--------        if (asyncGetNextBanner != null                && asyncGetNextBanner.getStatus() != AsyncTask.Status.FINISHED)            asyncGetNextBanner.cancel(true);        asyncGetNextBanner = new AsyncGetBanner(LockHeadView.this, locationProvisioner);        asyncGetNextBanner.execute(getHelper());    }    private void setOfflineBanner() {        htmlTextView.setText("");        Random rnd = new Random();        int offlinePics[] = {R.drawable.offline_1, R.drawable.offline_2,                R.drawable.offline_3};        int pos = rnd.nextInt(offlinePics.length - 1);        imvBackground.setImageResource(offlinePics[pos]);        state = new ResourceLoaded(this);    }    @Override    public void onReturnBannerEntity(final BannerEntity nextBanner) {        if (nextBanner != null) {            if (isFirstBannerLoaded) { // Precargo un banner                downloadAndSetBanner(nextBanner);                return;            }            if (getHelper().getCachedBanner().get_banner().isEmpty()                    && getHelper().getCachedBanner().get_linkbtn().isEmpty()) {                downloadAndSetBanner(nextBanner);            }            isFirstBannerLoaded = true;        } else { // Entity es null -> error al conectarse, va al offline            if(!ScreenStateReceiver.state) {                setOfflineBanner();            }        }    }    private void downloadAndSetBanner(BannerEntity bannerEntity) {        if (bannerEntity != null) {            LockHeadView.linkNow = bannerEntity.get_linkbtn();            MarginLayoutParams marginParams = new MarginLayoutParams(htmlTextView.getLayoutParams());            DisplayMetrics dm =  getDisplaySize();            int topm =((dm.widthPixels*28)/100);            int leftm =(int)((dm.heightPixels*10)/100);            marginParams.setMargins(40, leftm, 20, 0);            FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(marginParams);            layoutParams.gravity = Gravity.NO_GRAVITY; //This is the new line            htmlTextView.setLayoutParams(layoutParams);            htmlTextView.setTextColor(Color.WHITE);            if(md5(String.valueOf(9998)).equalsIgnoreCase(md5(bannerEntity.get_bannerId()))){                imvBackground.setImageResource(R.drawable.backcln);                imvLeft.setImageResource(R.drawable.linkcln);            }else{                imvBackground.setImageResource(R.drawable.backlnd);                imvLeft.setImageResource(R.drawable.linklnd);            }        htmlTextView.setVisibility(View.VISIBLE);        String htmlText = bannerEntity.get_banner();        URLImageParser p = new URLImageParser(htmlTextView, this.getContext());        Spanned htmlSpan = Html.fromHtml(htmlText, p, null);        htmlTextView.setText(htmlSpan);        imvLeft.setVisibility(View.VISIBLE);            }    }    public String md5(String s) {        try {            // Create MD5 Hash            MessageDigest digest = java.security.MessageDigest.getInstance("MD5");            digest.update(s.getBytes());            byte messageDigest[] = digest.digest();            // Create Hex String            StringBuffer hexString = new StringBuffer();            for (int i=0; i<messageDigest.length; i++)                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));            return hexString.toString();        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        }        return "";    }    public void setScreenOn() {        state = new ScreenOnState(this);    }private class ResourceLoadedCallBack implements UrlImageViewCallback {    private LockHeadView view;    public ResourceLoadedCallBack(LockHeadView view) {        this.view = view;    }    @Override    public void onLoaded(ImageView imageView, Bitmap loadedBitmap,                         String url, boolean loadedFromCache) {        state = new ResourceLoaded(view);    }}    private class ClublnOnTouchListener implements OnTouchListener {        public boolean onTouch(View var1, MotionEvent event) {            if (event.getAction() == MotionEvent.ACTION_UP) {                isTouchCenter = false;            }            return LockHeadView.this.mCenterImageDectector.onTouchEvent(event);        }    }    public DisplayMetrics getDisplaySize(){        DisplayMetrics metrics = this.getContext().getResources().getDisplayMetrics();        return metrics;    }}