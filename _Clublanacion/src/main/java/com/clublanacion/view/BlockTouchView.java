package com.clublanacion.view;import android.content.Context;import android.graphics.PixelFormat;import android.support.v4.view.GestureDetectorCompat;import android.util.Log;import android.view.GestureDetector.SimpleOnGestureListener;import android.view.Gravity;import android.view.MotionEvent;import android.view.View.OnClickListener;import android.view.WindowManager;import android.view.WindowManager.LayoutParams;import android.widget.ImageView;import com.clublanacion.util.PreferencesHelper;public class BlockTouchView {    private int haftViewWidth;    private boolean lockAnyTouch = false;    private Context mContext;    private OnClickListener mOnClicListener;    private int screenWidth = 0;    private int screenHeight = 0;    private LayoutParams param;    private ImageView mView;    private SimpleOnGestureListener mSimpleOnGestureListener = new SimpleOnGestureListener() {        public boolean onDown(MotionEvent event) {            boolean isOnView = BlockTouchView.this.checkOnView(                    (int) event.getRawX(), (int) event.getRawY());            lockAnyTouch = !isOnView;            BlockTouchView.this.updateDisplaySize();            return super.onDown(event);        }        public boolean onScroll(MotionEvent event1, MotionEvent event2,                                float distanceX, float distanceY) {            if (!BlockTouchView.this.lockAnyTouch) {                updateLayout(event2);            }            return true;        }        public boolean onSingleTapUp(MotionEvent var1) {            Log.i("ThuanPQ", "onSingleTapUp");            if (!BlockTouchView.this.lockAnyTouch                    && BlockTouchView.this.mOnClicListener != null) {                BlockTouchView.this.mOnClicListener                        .onClick(BlockTouchView.this.mView);                return true;            } else {                return true;            }        }    };    private WindowManager mWindowManager;    private int imvHeight;    private int imvWidth;    private PreferencesHelper helper;    public BlockTouchView(Context context) {        this.mContext = context;        this.mWindowManager = (WindowManager) this.mContext                .getSystemService(Context.WINDOW_SERVICE);        this.updateDisplaySize();        this.initView();    }    private void updateLayout(MotionEvent event2) {        param = (LayoutParams) BlockTouchView.this.mView.getLayoutParams();        int rawX = (int) event2.getRawX();        int rawY = (int) event2.getRawY();        if (rawX > this.screenWidth) {            rawX = this.screenWidth;        }        if (rawX < BlockTouchView.this.haftViewWidth) {            rawX = BlockTouchView.this.haftViewWidth;        }        if (rawY > this.screenHeight) {            rawY = this.screenHeight;        }        if (rawY < BlockTouchView.this.imvHeight) {            rawY = BlockTouchView.this.imvHeight;        }        param.x = rawX - BlockTouchView.this.haftViewWidth;        param.y = rawY - BlockTouchView.this.imvHeight;        if (param.y < 0) {            param.y = 0;        }        if (param.x < 0) {            param.x = 0;        }        BlockTouchView.this.mWindowManager.updateViewLayout(                BlockTouchView.this.mView, param);    }    private boolean checkOnView(int var1, int var2) {        int[] var3 = new int[2];        this.mView.getLocationOnScreen(var3);        return var1 >= -10 + var3[0] && var1 <= 10 + var3[0] + this.imvWidth                && var2 >= -10 + var3[1]                && var2 <= 10 + var3[1] + this.imvHeight;    }    private void initView() {        this.imvWidth = 1;        this.imvHeight = 1;        this.haftViewWidth = this.imvWidth / 2;        this.mView = new ImageView(this.mContext);        new GestureDetectorCompat(this.mContext, this.mSimpleOnGestureListener);    }    private void updateDisplaySize() {        screenHeight = 1;        screenWidth = 1;    }    public void dismiss() {        if (this.mView != null)            ((WindowManager) this.mContext                    .getSystemService(Context.WINDOW_SERVICE))                    .removeViewImmediate(this.mView);        this.setOnClickListener((OnClickListener) null);    }    public void dismissAndDestroy() {        if (this.mView != null)            ((WindowManager) this.mContext                    .getSystemService(Context.WINDOW_SERVICE))                    .removeViewImmediate(this.mView);        this.mView = null;    }    public void setBackgroundResource(int var1) {        this.mView.setBackgroundResource(var1);    }    public void setBlockTouch(boolean isBlock) {        try {            param = (LayoutParams) this.mView.getLayoutParams();            if (param == null)                return;            if (isBlock) {                param.flags = getNotificationBarFlag();                param.y = this.screenHeight / 2;                param.x = this.screenWidth / 2;            } else {                param.flags = LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH                        | LayoutParams.FLAG_NOT_FOCUSABLE;                param.y = this.screenHeight / 2;                param.x = 0;            }            this.mWindowManager.updateViewLayout(this.mView, param);        } catch (Exception ex) {            ex.printStackTrace();        }    }    public void setOnClickListener(OnClickListener canClick) {        this.mOnClicListener = canClick;    }    public void show() {        if (this.mView == null) {            this.initView();        }        try {            param = new LayoutParams(LayoutParams.WRAP_CONTENT,                    LayoutParams.WRAP_CONTENT, LayoutParams.TYPE_SYSTEM_ERROR,                    LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH                            | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE                            | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                            | getNotificationBarFlag(),                    PixelFormat.RGB_565);            param.y = this.screenHeight / 2;            param.gravity = Gravity.TOP | Gravity.LEFT;        } catch (Exception e) {            e.printStackTrace();        }    }    public void addViewToWindowManager() {        try {            this.mView.setLayoutParams(param);            ((WindowManager) this.mContext                    .getSystemService(Context.WINDOW_SERVICE)).addView(                    this.mView, param);        } catch (Exception e) {            e.printStackTrace();        }    }    private int getNotificationBarFlag() {        if (getHelper().getShowNotificationBar())            return WindowManager.LayoutParams.FLAG_FULLSCREEN;        else            return WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;    }    public void visible(boolean isBlock) {        ImageView view = this.mView;        int var3;        if (isBlock) {            var3 = view.VISIBLE;        } else {            var3 = view.INVISIBLE;        }        view.setVisibility(var3);    }    private PreferencesHelper getHelper() {        if (helper == null)            helper = new PreferencesHelper(mContext.getApplicationContext());        return helper;    }}